// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  userType      String        // 'designer' or 'consumer'
  accounts      Account[]
  sessions      Session[]
  tags          Tag[]
  listings      Listing[]
  reviews       Review[]
  fabricScores  FabricScore[]
  favorites     Favorite[]
  measurements  Measurements?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Measurements {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
  chest   Float
  waist   Float
  hips    Float
  inseam  Float
  updates Json[] // Store measurement history
}

model Tag {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  category          String   // 'FabricSpecialty', 'ClothingType', or 'Style'
  value             String
  tier              String   // 'Baseline', 'Gold', 'Diamond', or 'Cosmic'
  projectsCompleted Int      @default(0)
  nextTierThreshold Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, category, value])
}

model Listing {
  id                String     @id @default(cuid())
  title             String
  description       String
  price             Float
  category          String
  images            String[]
  materials         Material[]
  sustainabilityNotes String?
  designerId        String
  designer          User       @relation(fields: [designerId], references: [id])
  reviews           Review[]
  favorites         Favorite[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Material {
  id            String      @id @default(cuid())
  name          String
  listing       Listing     @relation(fields: [listingId], references: [id])
  listingId     String
  fabricScore   FabricScore @relation(fields: [fabricScoreId], references: [id])
  fabricScoreId String
}

model Review {
  id               String   @id @default(cuid())
  listing          Listing  @relation(fields: [listingId], references: [id])
  listingId        String
  reviewer         User     @relation(fields: [reviewerId], references: [id])
  reviewerId       String
  isDesignerReview Boolean
  designQuality    Float
  materialUse      Float
  sustainability   Float
  comment          String?
  createdAt        DateTime @default(now())
}

model FabricScore {
  id                String     @id @default(cuid())
  name              String
  qualityRating     Float
  sustainabilityScore Float
  origin            String
  supplier          String
  certifications    String[]
  materials         Material[]
  ratedBy          User       @relation(fields: [ratedById], references: [id])
  ratedById        String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}